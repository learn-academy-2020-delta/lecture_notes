{"ast":null,"code":"var _jsxFileName = \"/Users/rachaelstanislaw/Desktop/twister-demo/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Game from './components/Game';\nexport default class App extends Component {\n  constructor(props) {\n    super(props); // State is an object that stores a component's dynamic data and determines how the component renders and behaves.\n    // state will likely often update and change throughout the users' interaction with your app. However, we never update state directly. We update state using a JS method called setState(), which we will talk about in just a little bit.\n\n    this.handleChange = () => {\n      let {\n        bodyPlacementOptions,\n        colorOptions\n      } = this.state; // create 2 random numbers to pick a body part and a color\n\n      let bodyPosition = bodyPlacementOptions[Math.floor(Math.random() * 4)];\n      let colorPosition = colorOptions[Math.floor(Math.random() * 4)]; // return both of those things as a string\n\n      let newPosition = `${bodyPosition}${colorPosition}`; // update the state \"currentPosition\" based on the return\n\n      this.setState({\n        currentPosition: newPosition\n      });\n    };\n\n    this.state = {\n      currentPosition: \"\",\n      bodyPlacementOptions: [\"L🖐🏻\", \"R🤚🏻\", \"L🦶🏻\", \"R🦶🏻\"],\n      colorOptions: [\"🔴\", \"🔵\", \"🟢\", \"🟣\"]\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, \"Twister!!\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, \"Click me!\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, this.state.currentPosition));\n  }\n\n}","map":{"version":3,"sources":["/Users/rachaelstanislaw/Desktop/twister-demo/src/App.js"],"names":["React","Component","Game","App","constructor","props","handleChange","bodyPlacementOptions","colorOptions","state","bodyPosition","Math","floor","random","colorPosition","newPosition","setState","currentPosition","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,eAAe,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AACzCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;AACA;;AAHiB,SAWnBC,YAXmB,GAWJ,MAAM;AACnB,UAAI;AAAEC,QAAAA,oBAAF;AAAwBC,QAAAA;AAAxB,UAAyC,KAAKC,KAAlD,CADmB,CAEnB;;AACA,UAAIC,YAAY,GAAGH,oBAAoB,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAAvC;AACA,UAAIC,aAAa,GAAGN,YAAY,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAAhC,CAJmB,CAKnB;;AACA,UAAIE,WAAW,GAAI,GAAGL,YAAc,GAAGI,aAAe,EAAtD,CANmB,CAOnB;;AACA,WAAKE,QAAL,CAAc;AAAEC,QAAAA,eAAe,EAAEF;AAAnB,OAAd;AACD,KApBkB;;AAIf,SAAKN,KAAL,GAAa;AACXQ,MAAAA,eAAe,EAAE,EADN;AAEXV,MAAAA,oBAAoB,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAFX;AAGXC,MAAAA,YAAY,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB;AAHH,KAAb;AAKH;;AAaDU,EAAAA,MAAM,GAAG;AACP,wBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAQ,MAAA,OAAO,EAAG,KAAKZ,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKG,KAAL,CAAWQ,eADf,CALF,CADF;AAWD;;AAnCwC","sourcesContent":["import React, { Component } from 'react';\nimport './App.css'\nimport Game from './components/Game'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    // State is an object that stores a component's dynamic data and determines how the component renders and behaves.\n    // state will likely often update and change throughout the users' interaction with your app. However, we never update state directly. We update state using a JS method called setState(), which we will talk about in just a little bit.\n      this.state = {\n        currentPosition: \"\",\n        bodyPlacementOptions: [\"L🖐🏻\", \"R🤚🏻\", \"L🦶🏻\", \"R🦶🏻\"],\n        colorOptions: [\"🔴\", \"🔵\", \"🟢\", \"🟣\"]\n      }\n  }\n\n  handleChange = () => {\n    let { bodyPlacementOptions, colorOptions } = this.state\n    // create 2 random numbers to pick a body part and a color\n    let bodyPosition = bodyPlacementOptions[Math.floor(Math.random() * 4)]\n    let colorPosition = colorOptions[Math.floor(Math.random() * 4)]\n    // return both of those things as a string\n    let newPosition = `${ bodyPosition }${ colorPosition }`\n    // update the state \"currentPosition\" based on the return\n    this.setState({ currentPosition: newPosition })\n  }\n\n  render() {\n    return(\n      <>\n        <h1>Twister!!</h1>\n        <button onClick={ this.handleChange }>\n          Click me!\n        </button>\n        <div>\n          { this.state.currentPosition }\n        </div>\n      </>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}